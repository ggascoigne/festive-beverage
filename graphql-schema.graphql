"""
The root query type which gives access points into the data universe.
"""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """
  Fetches an object given its globally unique `ID`.
  """
  node(
    """
    The globally unique `ID`.
    """
    nodeId: ID!
  ): Node

  """
  Reads and enables pagination through a set of `Role`.
  """
  roles(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `Role`.
    """
    orderBy: [RolesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RoleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RoleFilter
  ): RolesConnection

  """
  Reads and enables pagination through a set of `User`.
  """
  users(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `User`.
    """
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserFilter
  ): UsersConnection

  """
  Reads and enables pagination through a set of `UserRole`.
  """
  userRoles(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `UserRole`.
    """
    orderBy: [UserRolesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserRoleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserRoleFilter
  ): UserRolesConnection
  role(id: Int!): Role
  roleByAuthority(authority: String!): Role
  user(id: Int!): User
  userByEmail(email: String!): User
  userRole(roleId: Int!, userId: Int!): UserRole
  currentUserId: Int
  currentUserIsAdmin: Boolean

  """
  Reads a single `Role` using its globally unique `ID`.
  """
  roleByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `Role`.
    """
    nodeId: ID!
  ): Role

  """
  Reads a single `User` using its globally unique `ID`.
  """
  userByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `User`.
    """
    nodeId: ID!
  ): User

  """
  Reads a single `UserRole` using its globally unique `ID`.
  """
  userRoleByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `UserRole`.
    """
    nodeId: ID!
  ): UserRole
}

"""
An object with a globally unique `ID`.
"""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""
A connection to a list of `Role` values.
"""
type RolesConnection {
  """
  A list of `Role` objects.
  """
  nodes: [Role]!

  """
  A list of edges which contains the `Role` and cursor to aid in pagination.
  """
  edges: [RolesEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `Role` you could get from the connection.
  """
  totalCount: Int!
}

type Role implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  authority: String!

  """
  Reads and enables pagination through a set of `UserRole`.
  """
  userRoles(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `UserRole`.
    """
    orderBy: [UserRolesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserRoleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserRoleFilter
  ): UserRolesConnection!
}

"""
A connection to a list of `UserRole` values.
"""
type UserRolesConnection {
  """
  A list of `UserRole` objects.
  """
  nodes: [UserRole]!

  """
  A list of edges which contains the `UserRole` and cursor to aid in pagination.
  """
  edges: [UserRolesEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `UserRole` you could get from the connection.
  """
  totalCount: Int!
}

type UserRole implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  roleId: Int!
  userId: Int!

  """
  Reads a single `Role` that is related to this `UserRole`.
  """
  role: Role

  """
  Reads a single `User` that is related to this `UserRole`.
  """
  user: User
}

type User implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  email: String!

  """
  Reads and enables pagination through a set of `UserRole`.
  """
  userRoles(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `UserRole`.
    """
    orderBy: [UserRolesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserRoleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserRoleFilter
  ): UserRolesConnection!
}

"""
A location in a connection that can be used for resuming pagination.
"""
scalar Cursor

"""
Methods to use when ordering `UserRole`.
"""
enum UserRolesOrderBy {
  NATURAL
  ROLE_ID_ASC
  ROLE_ID_DESC
  USER_ID_ASC
  USER_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  ROLE_BY_ROLE_ID__ID_ASC
  ROLE_BY_ROLE_ID__ID_DESC
  ROLE_BY_ROLE_ID__AUTHORITY_ASC
  ROLE_BY_ROLE_ID__AUTHORITY_DESC
  USER_BY_USER_ID__ID_ASC
  USER_BY_USER_ID__ID_DESC
  USER_BY_USER_ID__EMAIL_ASC
  USER_BY_USER_ID__EMAIL_DESC
}

"""
A condition to be used against `UserRole` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input UserRoleCondition {
  """
  Checks for equality with the object’s `roleId` field.
  """
  roleId: Int

  """
  Checks for equality with the object’s `userId` field.
  """
  userId: Int
}

"""
A filter to be used against `UserRole` object types. All fields are combined with a logical ‘and.’
"""
input UserRoleFilter {
  """
  Filter by the object’s `roleId` field.
  """
  roleId: IntFilter

  """
  Filter by the object’s `userId` field.
  """
  userId: IntFilter

  """
  Checks for all expressions in this list.
  """
  and: [UserRoleFilter!]

  """
  Checks for any expressions in this list.
  """
  or: [UserRoleFilter!]

  """
  Negates the expression.
  """
  not: UserRoleFilter
}

"""
A filter to be used against Int fields. All fields are combined with a logical ‘and.’
"""
input IntFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """
  Equal to the specified value.
  """
  equalTo: Int

  """
  Not equal to the specified value.
  """
  notEqualTo: Int

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Int

  """
  Equal to the specified value, treating null like an ordinary value.
  """
  notDistinctFrom: Int

  """
  Included in the specified list.
  """
  in: [Int!]

  """
  Not included in the specified list.
  """
  notIn: [Int!]

  """
  Less than the specified value.
  """
  lessThan: Int

  """
  Less than or equal to the specified value.
  """
  lessThanOrEqualTo: Int

  """
  Greater than the specified value.
  """
  greaterThan: Int

  """
  Greater than or equal to the specified value.
  """
  greaterThanOrEqualTo: Int
}

"""
A `UserRole` edge in the connection.
"""
type UserRolesEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `UserRole` at the end of the edge.
  """
  node: UserRole
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: Cursor

  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: Cursor
}

"""
A `Role` edge in the connection.
"""
type RolesEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `Role` at the end of the edge.
  """
  node: Role
}

"""
Methods to use when ordering `Role`.
"""
enum RolesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  AUTHORITY_ASC
  AUTHORITY_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  USER_ROLES_BY_ROLE_ID__COUNT_ASC
  USER_ROLES_BY_ROLE_ID__COUNT_DESC
}

"""
A condition to be used against `Role` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input RoleCondition {
  """
  Checks for equality with the object’s `id` field.
  """
  id: Int

  """
  Checks for equality with the object’s `authority` field.
  """
  authority: String
}

"""
A filter to be used against `Role` object types. All fields are combined with a logical ‘and.’
"""
input RoleFilter {
  """
  Filter by the object’s `id` field.
  """
  id: IntFilter

  """
  Filter by the object’s `authority` field.
  """
  authority: StringFilter

  """
  Checks for all expressions in this list.
  """
  and: [RoleFilter!]

  """
  Checks for any expressions in this list.
  """
  or: [RoleFilter!]

  """
  Negates the expression.
  """
  not: RoleFilter
}

"""
A filter to be used against String fields. All fields are combined with a logical ‘and.’
"""
input StringFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """
  Equal to the specified value.
  """
  equalTo: String

  """
  Not equal to the specified value.
  """
  notEqualTo: String

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: String

  """
  Equal to the specified value, treating null like an ordinary value.
  """
  notDistinctFrom: String

  """
  Included in the specified list.
  """
  in: [String!]

  """
  Not included in the specified list.
  """
  notIn: [String!]

  """
  Less than the specified value.
  """
  lessThan: String

  """
  Less than or equal to the specified value.
  """
  lessThanOrEqualTo: String

  """
  Greater than the specified value.
  """
  greaterThan: String

  """
  Greater than or equal to the specified value.
  """
  greaterThanOrEqualTo: String

  """
  Contains the specified string (case-sensitive).
  """
  includes: String

  """
  Does not contain the specified string (case-sensitive).
  """
  notIncludes: String

  """
  Contains the specified string (case-insensitive).
  """
  includesInsensitive: String

  """
  Does not contain the specified string (case-insensitive).
  """
  notIncludesInsensitive: String

  """
  Starts with the specified string (case-sensitive).
  """
  startsWith: String

  """
  Does not start with the specified string (case-sensitive).
  """
  notStartsWith: String

  """
  Starts with the specified string (case-insensitive).
  """
  startsWithInsensitive: String

  """
  Does not start with the specified string (case-insensitive).
  """
  notStartsWithInsensitive: String

  """
  Ends with the specified string (case-sensitive).
  """
  endsWith: String

  """
  Does not end with the specified string (case-sensitive).
  """
  notEndsWith: String

  """
  Ends with the specified string (case-insensitive).
  """
  endsWithInsensitive: String

  """
  Does not end with the specified string (case-insensitive).
  """
  notEndsWithInsensitive: String

  """
  Matches the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  like: String

  """
  Does not match the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  notLike: String

  """
  Matches the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  likeInsensitive: String

  """
  Does not match the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  notLikeInsensitive: String

  """
  Equal to the specified value (case-insensitive).
  """
  equalToInsensitive: String

  """
  Not equal to the specified value (case-insensitive).
  """
  notEqualToInsensitive: String

  """
  Not equal to the specified value, treating null like an ordinary value (case-insensitive).
  """
  distinctFromInsensitive: String

  """
  Equal to the specified value, treating null like an ordinary value (case-insensitive).
  """
  notDistinctFromInsensitive: String

  """
  Included in the specified list (case-insensitive).
  """
  inInsensitive: [String!]

  """
  Not included in the specified list (case-insensitive).
  """
  notInInsensitive: [String!]

  """
  Less than the specified value (case-insensitive).
  """
  lessThanInsensitive: String

  """
  Less than or equal to the specified value (case-insensitive).
  """
  lessThanOrEqualToInsensitive: String

  """
  Greater than the specified value (case-insensitive).
  """
  greaterThanInsensitive: String

  """
  Greater than or equal to the specified value (case-insensitive).
  """
  greaterThanOrEqualToInsensitive: String
}

"""
A connection to a list of `User` values.
"""
type UsersConnection {
  """
  A list of `User` objects.
  """
  nodes: [User]!

  """
  A list of edges which contains the `User` and cursor to aid in pagination.
  """
  edges: [UsersEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `User` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `User` edge in the connection.
"""
type UsersEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `User` at the end of the edge.
  """
  node: User
}

"""
Methods to use when ordering `User`.
"""
enum UsersOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  EMAIL_ASC
  EMAIL_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  USER_ROLES_BY_USER_ID__COUNT_ASC
  USER_ROLES_BY_USER_ID__COUNT_DESC
}

"""
A condition to be used against `User` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input UserCondition {
  """
  Checks for equality with the object’s `id` field.
  """
  id: Int

  """
  Checks for equality with the object’s `email` field.
  """
  email: String
}

"""
A filter to be used against `User` object types. All fields are combined with a logical ‘and.’
"""
input UserFilter {
  """
  Filter by the object’s `id` field.
  """
  id: IntFilter

  """
  Filter by the object’s `email` field.
  """
  email: StringFilter

  """
  Checks for all expressions in this list.
  """
  and: [UserFilter!]

  """
  Checks for any expressions in this list.
  """
  or: [UserFilter!]

  """
  Negates the expression.
  """
  not: UserFilter
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """
  Creates a single `Role`.
  """
  createRole(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateRoleInput!
  ): CreateRolePayload

  """
  Creates a single `User`.
  """
  createUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUserInput!
  ): CreateUserPayload

  """
  Creates a single `UserRole`.
  """
  createUserRole(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUserRoleInput!
  ): CreateUserRolePayload

  """
  Updates a single `Role` using its globally unique id and a patch.
  """
  updateRoleByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRoleByNodeIdInput!
  ): UpdateRolePayload

  """
  Updates a single `Role` using a unique key and a patch.
  """
  updateRole(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRoleInput!
  ): UpdateRolePayload

  """
  Updates a single `Role` using a unique key and a patch.
  """
  updateRoleByAuthority(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRoleByAuthorityInput!
  ): UpdateRolePayload

  """
  Updates a single `User` using its globally unique id and a patch.
  """
  updateUserByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserByNodeIdInput!
  ): UpdateUserPayload

  """
  Updates a single `User` using a unique key and a patch.
  """
  updateUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserInput!
  ): UpdateUserPayload

  """
  Updates a single `User` using a unique key and a patch.
  """
  updateUserByEmail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserByEmailInput!
  ): UpdateUserPayload

  """
  Updates a single `UserRole` using its globally unique id and a patch.
  """
  updateUserRoleByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserRoleByNodeIdInput!
  ): UpdateUserRolePayload

  """
  Updates a single `UserRole` using a unique key and a patch.
  """
  updateUserRole(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserRoleInput!
  ): UpdateUserRolePayload

  """
  Deletes a single `Role` using its globally unique id.
  """
  deleteRoleByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRoleByNodeIdInput!
  ): DeleteRolePayload

  """
  Deletes a single `Role` using a unique key.
  """
  deleteRole(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRoleInput!
  ): DeleteRolePayload

  """
  Deletes a single `Role` using a unique key.
  """
  deleteRoleByAuthority(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRoleByAuthorityInput!
  ): DeleteRolePayload

  """
  Deletes a single `User` using its globally unique id.
  """
  deleteUserByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserByNodeIdInput!
  ): DeleteUserPayload

  """
  Deletes a single `User` using a unique key.
  """
  deleteUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserInput!
  ): DeleteUserPayload

  """
  Deletes a single `User` using a unique key.
  """
  deleteUserByEmail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserByEmailInput!
  ): DeleteUserPayload

  """
  Deletes a single `UserRole` using its globally unique id.
  """
  deleteUserRoleByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserRoleByNodeIdInput!
  ): DeleteUserRolePayload

  """
  Deletes a single `UserRole` using a unique key.
  """
  deleteUserRole(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserRoleInput!
  ): DeleteUserRolePayload
  fTruncateTables(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: FTruncateTablesInput!
  ): FTruncateTablesPayload
}

"""
The output of our create `Role` mutation.
"""
type CreateRolePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `Role` that was created by this mutation.
  """
  role: Role

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  An edge for our `Role`. May be used by Relay 1.
  """
  roleEdge(
    """
    The method to use when ordering `Role`.
    """
    orderBy: [RolesOrderBy!] = [PRIMARY_KEY_ASC]
  ): RolesEdge
}

"""
All input for the create `Role` mutation.
"""
input CreateRoleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `Role` to be created by this mutation.
  """
  role: RoleInput!
}

"""
An input for mutations affecting `Role`
"""
input RoleInput {
  id: Int
  authority: String!
}

"""
The output of our create `User` mutation.
"""
type CreateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `User` that was created by this mutation.
  """
  user: User

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  An edge for our `User`. May be used by Relay 1.
  """
  userEdge(
    """
    The method to use when ordering `User`.
    """
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""
All input for the create `User` mutation.
"""
input CreateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `User` to be created by this mutation.
  """
  user: UserInput!
}

"""
An input for mutations affecting `User`
"""
input UserInput {
  id: Int
  email: String!
}

"""
The output of our create `UserRole` mutation.
"""
type CreateUserRolePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `UserRole` that was created by this mutation.
  """
  userRole: UserRole

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Role` that is related to this `UserRole`.
  """
  role: Role

  """
  Reads a single `User` that is related to this `UserRole`.
  """
  user: User

  """
  An edge for our `UserRole`. May be used by Relay 1.
  """
  userRoleEdge(
    """
    The method to use when ordering `UserRole`.
    """
    orderBy: [UserRolesOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserRolesEdge
}

"""
All input for the create `UserRole` mutation.
"""
input CreateUserRoleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `UserRole` to be created by this mutation.
  """
  userRole: UserRoleInput!
}

"""
An input for mutations affecting `UserRole`
"""
input UserRoleInput {
  roleId: Int!
  userId: Int!
}

"""
The output of our update `Role` mutation.
"""
type UpdateRolePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `Role` that was updated by this mutation.
  """
  role: Role

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  An edge for our `Role`. May be used by Relay 1.
  """
  roleEdge(
    """
    The method to use when ordering `Role`.
    """
    orderBy: [RolesOrderBy!] = [PRIMARY_KEY_ASC]
  ): RolesEdge
}

"""
All input for the `updateRoleByNodeId` mutation.
"""
input UpdateRoleByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Role` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Role` being updated.
  """
  patch: RolePatch!
}

"""
Represents an update to a `Role`. Fields that are set will be updated.
"""
input RolePatch {
  id: Int
  authority: String
}

"""
All input for the `updateRole` mutation.
"""
input UpdateRoleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Role` being updated.
  """
  patch: RolePatch!
  id: Int!
}

"""
All input for the `updateRoleByAuthority` mutation.
"""
input UpdateRoleByAuthorityInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Role` being updated.
  """
  patch: RolePatch!
  authority: String!
}

"""
The output of our update `User` mutation.
"""
type UpdateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `User` that was updated by this mutation.
  """
  user: User

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  An edge for our `User`. May be used by Relay 1.
  """
  userEdge(
    """
    The method to use when ordering `User`.
    """
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""
All input for the `updateUserByNodeId` mutation.
"""
input UpdateUserByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `User` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  patch: UserPatch!
}

"""
Represents an update to a `User`. Fields that are set will be updated.
"""
input UserPatch {
  id: Int
  email: String
}

"""
All input for the `updateUser` mutation.
"""
input UpdateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  patch: UserPatch!
  id: Int!
}

"""
All input for the `updateUserByEmail` mutation.
"""
input UpdateUserByEmailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  patch: UserPatch!
  email: String!
}

"""
The output of our update `UserRole` mutation.
"""
type UpdateUserRolePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `UserRole` that was updated by this mutation.
  """
  userRole: UserRole

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Role` that is related to this `UserRole`.
  """
  role: Role

  """
  Reads a single `User` that is related to this `UserRole`.
  """
  user: User

  """
  An edge for our `UserRole`. May be used by Relay 1.
  """
  userRoleEdge(
    """
    The method to use when ordering `UserRole`.
    """
    orderBy: [UserRolesOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserRolesEdge
}

"""
All input for the `updateUserRoleByNodeId` mutation.
"""
input UpdateUserRoleByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `UserRole` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `UserRole` being updated.
  """
  patch: UserRolePatch!
}

"""
Represents an update to a `UserRole`. Fields that are set will be updated.
"""
input UserRolePatch {
  roleId: Int
  userId: Int
}

"""
All input for the `updateUserRole` mutation.
"""
input UpdateUserRoleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `UserRole` being updated.
  """
  patch: UserRolePatch!
  roleId: Int!
  userId: Int!
}

"""
The output of our delete `Role` mutation.
"""
type DeleteRolePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `Role` that was deleted by this mutation.
  """
  role: Role
  deletedRoleNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  An edge for our `Role`. May be used by Relay 1.
  """
  roleEdge(
    """
    The method to use when ordering `Role`.
    """
    orderBy: [RolesOrderBy!] = [PRIMARY_KEY_ASC]
  ): RolesEdge
}

"""
All input for the `deleteRoleByNodeId` mutation.
"""
input DeleteRoleByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Role` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteRole` mutation.
"""
input DeleteRoleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""
All input for the `deleteRoleByAuthority` mutation.
"""
input DeleteRoleByAuthorityInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  authority: String!
}

"""
The output of our delete `User` mutation.
"""
type DeleteUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `User` that was deleted by this mutation.
  """
  user: User
  deletedUserNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  An edge for our `User`. May be used by Relay 1.
  """
  userEdge(
    """
    The method to use when ordering `User`.
    """
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""
All input for the `deleteUserByNodeId` mutation.
"""
input DeleteUserByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `User` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteUser` mutation.
"""
input DeleteUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""
All input for the `deleteUserByEmail` mutation.
"""
input DeleteUserByEmailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  email: String!
}

"""
The output of our delete `UserRole` mutation.
"""
type DeleteUserRolePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `UserRole` that was deleted by this mutation.
  """
  userRole: UserRole
  deletedUserRoleNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Role` that is related to this `UserRole`.
  """
  role: Role

  """
  Reads a single `User` that is related to this `UserRole`.
  """
  user: User

  """
  An edge for our `UserRole`. May be used by Relay 1.
  """
  userRoleEdge(
    """
    The method to use when ordering `UserRole`.
    """
    orderBy: [UserRolesOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserRolesEdge
}

"""
All input for the `deleteUserRoleByNodeId` mutation.
"""
input DeleteUserRoleByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `UserRole` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteUserRole` mutation.
"""
input DeleteUserRoleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  roleId: Int!
  userId: Int!
}

"""
The output of our `fTruncateTables` mutation.
"""
type FTruncateTablesPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
All input for the `fTruncateTables` mutation.
"""
input FTruncateTablesInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  _username: String
}
